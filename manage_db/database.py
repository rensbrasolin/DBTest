# Aqui dou GET no DB, e depois o importo onde precisar, para mexer nele.

# ------------------------------------------------------------------------------------------------ ‚ö†Ô∏è Dica de seguran√ßa
# Depois que testar e confirmar que est√° funcionando, o ideal √© guardar essa URL em uma vari√°vel de ambiente
#   (ex: os.getenv("DATABASE_URL")) para n√£o deixar sua senha exposta no c√≥digo.
# Mas no in√≠cio, pode deixar direto no c√≥digo enquanto estiver testando localmente.

# ---------------------------------------------------------------------------------------------------------- H√çBRIDO
# Jeito 3: Resolve os 2 casos e n√£o precisa ficar alterando codigo pra mexer no app local

"""
database.py
M√≥dulo de conex√£o ao banco que funciona
tanto localmente (via .env) quanto na nuvem (Railway)
"""

import os
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from dotenv import load_dotenv   # ‚Üê carrega o .env localmente

# ------------------------------------------------------------------
# 1) Carrega vari√°veis do .env SE o arquivo existir.
#    - Em produ√ß√£o n√£o faz mal: se o arquivo n√£o existir, n√£o acontece nada.
# ------------------------------------------------------------------
load_dotenv()

# ------------------------------------------------------------------
# 2) Pega a URL do banco da vari√°vel de ambiente.
#    - No Railway: valor injetado automaticamente.
#    - Localmente: valor vindo do .env.
# ------------------------------------------------------------------
DATABASE_URL = os.getenv("DATABASE_URL")

# 3) Se mesmo assim for None, lan√ßamos erro expl√≠cito
if not DATABASE_URL:
    raise RuntimeError(
        "DATABASE_URL n√£o definida. "
        "Crie um arquivo .env com DATABASE_URL=... ou configure no Railway."
    )

# ------------------------------------------------------------------
# 4) Cria engine do SQLAlchemy
#    - pool_pre_ping evita sockets zumbis
#    - pool_size=5 √© suficiente para at√© ~50 requisi√ß√µes simult√¢neas
# ------------------------------------------------------------------
db = create_engine(DATABASE_URL, pool_pre_ping=True, pool_size=5)

# Cria f√°brica de sess√£o e classe Base
SessionLocal = sessionmaker(bind=db)
Base = declarative_base()


# # --------------------------------------------------------------------------------------------------------- LOCAL - 1
# # Jeito 1 acesso local: Direto pela URL do DB.
# from sqlalchemy import create_engine
# from sqlalchemy.orm import sessionmaker, declarative_base
#
# DATABASE_PUBLIC_URL = ""
#
# # Cria a conex√£o com o banco de dados usando a URL p√∫blica fornecida pelo Railway
# db = create_engine(DATABASE_PUBLIC_URL)
#
# # Cria uma f√°brica de sess√µes para intera√ß√µes com o banco (ex: consultas, inser√ß√µes)
# SessionLocal = sessionmaker(bind=db)
#
# # Classe base usada para definir os modelos das tabelas (ORM)
# Base = declarative_base()


# --------------------------------------------------------------------------------------------------------- ONLINE - 2
# # 2 acesso online: pela varivavel de ambiente do Railway nuvem
#
# import os
# from sqlalchemy import create_engine
# from sqlalchemy.orm import sessionmaker, declarative_base
#

# # DATABASE_URL √© variavel de ambiente criada la na parte de vari√°veis do app.
# # Na vdd ela puxa essa variavel que automaticamente j√° existe nas var de ambiente do objeto DB Railway.
# # Crio minha variavel DB_URL para diferenciar dos nomes padr√£o que existem.
# DB_URL = os.getenv("DATABASE_URL")
#
# # ‚ûã Cria engine e objetos ORM normalmente
# db = create_engine(DB_URL, pool_pre_ping=True, pool_size=5)
# SessionLocal = sessionmaker(bind=db)
# Base = declarative_base()









# --------------------------------------------------------------------------------------------------- INFORMA√á√ïES √öTEIS
# ) Referenciar a URL do banco no servi√ßo do app (Criar var de ambiente)
# Abra o servi√ßo do app (Teste DB ‚Üí aba Vari√°veis).
#
# Clique em ‚Äú+ NOVA vari√°vel‚Äù.
# Selecione o servi√ßo Postgres e a vari√°vel DATABASE_URL (ou URL_DO_BANCO_DE_DADOS, depende do nome que o Railway gera).
# D√™ um nome amig√°vel, por exemplo DATABASE_URL.
# # ******************* Na vdd nao escolhi o nome, apenas escolhi (fix referencia) DATABASE_URL**************

# O painel criar√° algo como
# DATABASE_URL = {{ Postgres.DATABASE_URL }}
# (Railway faz a interpola√ß√£o autom√°tica).

# üí° Resumindo jeito seguro e eficiente de acessar o DB:
# Crie a vari√°vel DATABASE_URL no servi√ßo do app apontando para o servi√ßo do Postgres.
# Leia essa vari√°vel no Python com os.getenv("DATABASE_URL").
# Apague a string fixa do reposit√≥rio.
# Para acessar localmente, crie arquvos .env (var de ambiente nele). E .gitignore e
    # fa√ßa como no c√≥digo: procura local no .env. Ele s√≥ vai achar no .env se estivermos local pois o
    # .env n√£o deve ir pra nuvem. Mesmo que v√°, ser√° 'bloquedo' pelo gitignore